name: Deploy

on: [push]

jobs:
  build:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        dotnet-version: ['3.0', '3.1.x', '5.0.x', '6.0.x', '7.0.x']
    name: Build and test
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: main
          fetch-depth: 0
          token: ${{ secrets.FG_L_PAT2 }}
          submodules: recursive
      - name: Setup .NET SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      - name: Install dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --configuration Release --no-restore
      - name: Upload dotnet test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: TestResults
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}

  pack-nuget:
    needs: build
    runs-on: ubuntu-20.04
    name: Dotnet Pack
    if: github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: main
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 3.1.x
      - name: Determine version
        run: echo "VERSION=$(git describe --tags --dirty)" >> $GITHUB_ENV
      - name: Pack
        run: dotnet pack --output ./artifacts --configuration Release -p:Version=1.0.0
      - name: Upload package
        uses: actions/upload-artifact@v1
        with:
          name: artifacts
          path: ./artifacts
  
  pack-unitypackage:
    runs-on: ubuntu-20.04
    needs: pack-nuget
    name: Unity Package Pack
    if: github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: unity_develop
          fetch-depth: 0
          token: ${{ secrets.FG_L_PAT2 }}
          submodules: recursive
      - name: Find all meta files
        run: |
          echo "AnchorLinkSharp.meta" > metaList
          echo "anchorlinktransportsharp.meta" > metaList
          echo "eosiosigningrequestsharp.meta" > metaList
          echo "README.md.meta" > metaList
          find AnchorLinkSharp/ -name \*.meta >> metaList
          find anchorlinktransportsharp/ -name \*.meta >> metaList
          find eosiosigningrequestsharp/ -name \*.meta >> metaList
      - name: Make directory for our unity package
        run: mkdir a
      - name: Create Unity Package
        uses: pCYSl5EDgo/create-unitypackage@master
        with:
          package-path: 'a/io.liquiid.anchorlinksharp.unitypackage'
          include-files: metaList
      - name: Upload package
        uses: actions/upload-artifact@v1
        with:
          name: a
          path: ./a

  release:
    runs-on: ubuntu-20.04
    needs: pack-unitypackage
    if: github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Determine version
        run: echo "VERSION=$(git describe --tags --dirty)" >> $GITHUB_ENV
      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1.12.0
        with:
          tag: 1.0.1
          name: Release 1.0.1
          body: ${{ env.VERSION }}
          makeLatest: true
      - name: Download unity package
        uses: actions/download-artifact@v1
        with:
          name: a
          path: ./a
      - name: Upload unity package to release
        uses: Fhwang0926/upload-release-asset@v1.1.17
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_name: a/io.liquiid.anchorlinksharp.unitypackage # path + filename
  
  github-publish:
    runs-on: ubuntu-20.04
    needs: release
    name: Publish to GitHub
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 3.1.x
      - name: Download package
        uses: actions/download-artifact@v1
        with:
          name: artifacts
          path: ./artifacts
      - name: Push package to GitHub
        run: dotnet nuget push ./artifacts**.nupkg --api-key ${{secrets.GITHUB_TOKEN}} --source "https://nuget.pkg.github.com/liquiidio/index.json"

  nuget-publish:
    runs-on: ubuntu-20.04
    needs: release
    name: Publish to Nuget
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 3.1.x
      - name: Download package
        uses: actions/download-artifact@v1
        with:
          name: artifacts
          path: ./artifacts
      - name: Push package to Nuget
        run: dotnet nuget push ./artifacts**.nupkg --api-key ${{secrets.NUGET_KEY}} --source "https://api.nuget.org/v3/index.json"
        
  split-upm:
    needs: release
    name: Split UPM branch
    runs-on: ubuntu-20.04
    if: github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: unity_develop
          fetch-depth: 0
          token: ${{ secrets.FG_L_PAT2 }}
          submodules: recursive
      - name: split upm branch
        run: |
          git branch -d upm &> /dev/null || echo upm branch not found # recreate the upm branch each time
          echo "********************** ROOT **********************"
          ls
          git config --global user.name 'github-bot'
          git config --global user.email 'github-bot@users.noreply.github.com'
          git checkout -b upm                                            # checkout the branch
          git subtree add --prefix=temp/anchorlinktransportsharp anchorlinktransportsharp $(git rev-parse HEAD:anchorlinktransportsharp)
          git subtree add --prefix=temp/eosiosigningrequestsharp eosiosigningrequestsharp $(git rev-parse HEAD:eosiosigningrequestsharp)
          git rm .gitmodules
          git rm -rf anchorlinktransportsharp
          git rm -rf eosiosigningrequestsharp
          git add .
          git rm -r .github
          git commit -am "removed submodules and merged them to upm"
          mkdir anchorlinktransportsharp
          mkdir eosiosigningrequestsharp
          cp -r temp/anchorlinktransportsharp/. anchorlinktransportsharp
          cp -r temp/eosiosigningrequestsharp/. eosiosigningrequestsharp
          git rm -rf temp
          git add .
          git commit -m "rearraged the files to their correct folder"
          git push -u origin upm --force                              # commit the branch

        
